Git笔记.txt

---------------------------------------------------

Git签名
形式:
    用户名: dom4j
    邮箱: w15635606382@gmail.com
作用: 为了区分不同的开发人员
注: 用户名和邮箱均与 GitHub账号没有任何关系









签名有全局范围和项目范围之分, 每个项目可以拥有独立的签名

项目级别/仓库级别: 仅在当前本地库范围有效 (配置保存在当前项目下 .git/config 文件中)
=> git config user.name xxx
   git config user.email xxx@yyy.com

系统用户: 登录当前系统的用户范围  (配置保存在)
=> git config --global user.name xxx
   git config --global user.email xxx@yyy.com

查询签名
$ git config -l
core.symlinks=false
core.autocrlf=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
pack.packsizelimit=2g
help.format=html
http.sslcainfo=J:/dev/tools/git/Git/mingw32/ssl/certs/ca-bundle.crt
diff.astextplain.textconv=astextplain
rebase.autosquash=true
user.name=bobo
user.email=w15635606382@gmail.com
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
core.hidedotfiles=dotGitOnly
remote.origin.url=https://github.com/tanzhiyihuijian/git_demo.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
remote.origin_git_demo.url=git@github.com:tanzhiyihuijian/git_demo.git
remote.origin_git_demo.fetch=+refs/heads/*:refs/remotes/origin_git_demo/*
branch.master.remote=origin
branch.master.merge=refs/heads/master


签名信息保存在何处 ?
$ cat .git/config
[core]
        repositoryformatversion = 0
        filemode = false
        bare = false
        logallrefupdates = true
        symlinks = false
        ignorecase = true
        hideDotFiles = dotGitOnly
[remote "origin"]
        url = https://github.com/tanzhiyihuijian/git_demo.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[remote "origin_git_demo"]
        url = git@github.com:tanzhiyihuijian/git_demo.git
        fetch = +refs/heads/*:refs/remotes/origin_git_demo/*
[branch "master"]
        remote = origin
        merge = refs/heads/master
[user]
        name = dom4j
        email = netty_dom4j@163.com


全局范围内的Git签名, 保存在用户家目录下的 .gitconfig文件中
$ cat /c/Users/w1563/.gitconfig
[user]
        name = bobo
        email = w15635606382@gmail.com



优先级: 就近原则, 项目级别优先级高 (如果只有系统用户级别的签名, 就以系统用户级别为准)

配置签名方式


    git config




---------------------------------------------------
git add <file>  将文件提交到暂存区
git rm --cached <file>  将文件从暂存区删除
git status  查看文件状态

已经在暂存区, 但在工作区发生了修改, 此时可以选择提交或放弃修改到暂存区
git checkout -- <file>  丢弃修改, 恢复成和暂存区一样的状态
git add <file>


git log  版本提交记录查看
git log --pretty=oneline    简洁显示 (哈希值 + 提交说明)
git log --oneline  简洁显示(部分哈希值 + 提交说明)   只显示当前版本之前的记录
git reflog 简洁显示(部分哈希值 + 指针移动数目 + 提交说明)


------------------------------------------
版本前进和后退
1. 基于索引: 前进后退都可以
git reset --hard <hash>

2. ^符号: 只能后退
git reset --hard HEAD^^^   一个^表示后退一个版本

3. ~符号: 只能后退
git reset --hard HEAD~5    ~后面加数字表示后退几个版本


reset的三个参数
  --hard:  仅仅在本地库移动HEAD指针
  --soft:  在本地库移动HEAD指针, 重置暂存区
  --mixed: 在本地库移动HEAD指针, 重置暂存区和工作区


-----------------------------------
已删除文件找回

1. 已提交至暂存区, 还未提交到本地库
git checkout -- <file>  从暂存区恢复文件

2. 已提交至本地库
git checkout -- <file>
版本回退


--------------------------------
比较文件差异

git diff <file>   工作区文件和暂存区比较
git diff HEAD <file>  工作区文件和本地库比较
git diff HEAD^^ <file>  工作区文件和本地库任意版本比较



--------------------
分支管理

git branch  查看分支
git branch <branch_name>    创建新分支
git checkout <branch_name>  切换分支


合并分支
1. 切换到被合并的分支上面
git checkout <branch_name>

2. 合并分支
git merge <branch_name>

3. 冲突解决





推送至远程库
1. github创建远程仓库
https://github.com/tanzhiyihuijian/git_demo.git

2. 在本地为远程库起别名
git remote add origin https://github.com/tanzhiyihuijian/git_demo.git
git remote -v  查看远程库

3. 推送至远程库
git push origin master


----------------------------------------------------------


git clone
语法: git clone <版本库网址>
作用: 从远程仓库克隆一个版本库, 该命令会在本地主机生成一个目录, 与远程主机的版本库同名,
  如果要指定不同的目录名, 可以将目录名作为 git clone的第二个参数
  git clone <版本库网址> <本地目录名>

git clone支持多种协议, 除了 http(s)外, 还支持 ssh, git, 本地协议等


------
git remote
语法: git remote [option]
作用: 为了便于管理, Git要求每个远程主机都必须指定一个主机名, git remote就用于管理主机名
示例:

  git remote
    列出所有远程主机

    $ git remote
    origin


  git remote -v
    查看远程主机的网址 (克隆版本库的时候, 远程主机被 git自动命名为 origin)

    $ git remote -v
    origin  https://github.com/tanzhiyihuijian/git_demo.git (fetch)
    origin  https://github.com/tanzhiyihuijian/git_demo.git (push)


  git remote show <主机名>
    查看主机的信息

    $ git remote show origin
    * remote origin
      Fetch URL: https://github.com/tanzhiyihuijian/git_demo.git
      Push  URL: https://github.com/tanzhiyihuijian/git_demo.git
      HEAD branch: master
      Remote branches:
        bobo   new (next fetch will store in remotes/origin)
        master tracked
      Local branch configured for 'git pull':
        master merges with remote master
      Local ref configured for 'git push':
        master pushes to master (up to date)


  git remote add <主机名> <网址>
    用于添加远程主机

  git remote rm <主机名>
    删除远程主机

  git remote rname <原主机名> <新主机名>
    修改远程库别名

----

git fetch
  一旦远程主机版本库有了更新(Git术语叫做 commit), 需要将这些更新取回本地,
  这时就要用到 git fetch命令

  git fetch命令通常用来查看其他人的进程, 因为它取回的代码对你本地的开发代码没有影响


git fetch
  将某个远程主机的更新全部取回本地
  默认情况下, git fetch取回所有分支的更新, 如果只想取回特定的分支, 可以指定分支名
  git fetch <远程主机名> <分支名>
  所取回的更新, 在本地主机上要用 远程主机名/分支名访问, 如: origin/master

git branch命令的 -r选项, 可以用来查看远程分支,  -a查看所有分支
  $ git branch -r
  origin/master

  $ git branch -a
  a_branch
  atom_branch
  b_branch
* master
  remotes/origin/master


  取回远程主机的更新后, 可以在他的基础之上, 使用 git checkout命令创建一个新的分支
  git checkout -b new_branch origin/master


  也可以使用 git merge命令或者 git rebase 命令, 在本地分支上合并远程分支
  $ git merge origin/master

--------------------------------------

git pull
作用: 取回远程主机某个分支的更新, 再与本地分支进行合并
语法: git pull <远程主机名> <远程分支名> : <本地分支名>

  如取回origin主机的 next分支, 与本地的 master分支合并, 需要写成下面这样
    git pull origin next:master
  如果远程分支与当前分支合并, 则冒号后面的部分可以省略
    git pull origin (该命令等同于: 先做 git fetch, 再做 git merge)

    git fetch origin
    git merge origin/master























git









push

fetch
语法: git fetch <远程主机名> <分支名>
作用: 将远程库的更新全部取回本地

pull
语法: git pull <远程主机名> <远程分支名>:<本地分支名>
作用: 取回远程主机某个分支的更新，再与本地的指定分支合并。

force push









    













----
